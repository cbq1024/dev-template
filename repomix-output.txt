This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-11-24T15:06:56.469Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.devcontainer/
  devcontainer.json
.github/
  ISSUE_TEMPLATE/
    bug_report.yaml
    config.yaml
    enhancement.yaml
    feature_request.yaml
  workflows/
    release-drafter.yaml
  dependabot.yml
  pull_request_template.md
  release-drafter.yml
  settings.yml
.editorconfig
.gitattributes
.gitignore
.repomixignore
CODE_OF_CONDUCT.md
CONTRIBUTING.md
LICENSE
repomix.config.json
SECURITY.md

================================================================
Repository Files
================================================================

================
File: .devcontainer/devcontainer.json
================
// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/ubuntu
{
	"name": "dev-template",
	// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
	"image": "mcr.microsoft.com/devcontainers/base:jammy",
	"features": {
		"ghcr.io/devcontainers/features/node:1": {},
		"ghcr.io/ebaskoro/devcontainer-features/sdkman:1": {}
	},
	"customizations": {
		"vscode": {
			"extensions": [
				"k--kato.intellij-idea-keybindings",
				"yzhang.markdown-all-in-one",
				"PKief.material-icon-theme",
				"azemoh.one-monokai",
				"wayou.vscode-todo-highlight"
			]
		}
	}

	// Features to add to the dev container. More info: https://containers.dev/features.
	// "features": {},

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],

	// Use 'postCreateCommand' to run commands after the container is created.
	// "postCreateCommand": "uname -a",

	// Configure tool-specific properties.
	// "customizations": {},

	// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
	// "remoteUser": "root"
}

================
File: .github/ISSUE_TEMPLATE/bug_report.yaml
================
name: 错误报告
description: 提交一个错误报告
title: "[Bug]: "
labels: ["bug"]
body:
  - type: markdown
    attributes:
      value: |
        感谢您花时间填写这份错误报告！在提交“错误”之前，请确保没有现有的 issue 与您遇到的问题相同，并且已经通过[讨论区](https://github.com/coder-mcdd/mcdd-how-to-spring-boot3/discussions)或 Slack 与团队讨论过。如果确定这是一个新问题，请按以下表格填写相关信息。
  - type: dropdown
    id: module
    attributes:
      label: 模块
      description: 您使用的是哪个模块？
      options:
        - 核心
        - 数据库
        - 网络
        - 安全
        - UI
        - ...
    validations:
      required: true
  - type: textarea
    id: additional-information
    attributes:
      label: 附加信息
      description: |
        任何链接或参考资料，以提供有关问题的更多上下文。

        提示: 您可以通过点击此区域来聚焦它，然后拖动文件进来，以附加一个最小的示例项目来重现问题，或上传更多日志文件。

================
File: .github/ISSUE_TEMPLATE/config.yaml
================
blank_issues_enabled: false
contact_links:
  - name: Need help or have a question?
    url: https://join.slack.com/mcddhub
    about: Join our Slack channel for real-time help and support.
  - name: Have a question or want to start a Community discussion?
    url: https://github.com/mcddhub/mcdd-spring-boot-study/discussions/
    about: Visit our Discussions page to ask questions or start conversations with the community.

================
File: .github/ISSUE_TEMPLATE/enhancement.yaml
================
name: 功能增强
description: 提出功能增强建议
title: "[Feature]: "
labels: ["feature"]
body:
  - type: markdown
    attributes:
      value: |
        在提交 `功能增强` 建议之前，请确保没有与您请求相同的现有增强建议，并且已经通过 [讨论区](https://github.com/mcddhub/mcdd-how-to-spring-boot3/discussions) 或 Slack 与团队讨论过。如果已经确认，请按照以下格式填写相关信息：

        **注意**: 提供尽可能详细的信息，将有助于团队更好地理解和评估您的建议。

  - type: dropdown
    id: module
    attributes:
      label: 模块
      description: 这个功能增强建议适用于哪个模块？
      options:
        - 核心模块
        - 用户界面
        - API
        - 数据库
        - 安全性
        - 网络
        - 其他
    validations:
      required: true
  - type: textarea
    id: proposal
    attributes:
      label: 建议内容
      description: |
        1. 您希望改进什么功能？
        2. 当前的实现有哪些局限性？
        3. 您的建议如何解决这些问题？请详细描述增强功能的细节。
        4. 如果适用，是否有类似项目或功能可供参考？
    validations:
      required: true
  - type: textarea
    id: additional-information
    attributes:
      label: 附加信息
      description: |
        请提供任何附加信息、参考资料或链接，帮助团队更好地理解您的建议。
        
        **提示**: 您可以通过点击此区域来聚焦它，然后拖动文件或链接到此区域，以提供更多信息。

================
File: .github/ISSUE_TEMPLATE/feature_request.yaml
================
name: 功能请求
description: 建议一个新功能
title: "[Feature]: "
labels: ["feature"]
body:
  - type: markdown
    attributes:
      value: |
        感谢您提出新的功能建议！在提交 "功能请求" 之前，请确保没有现有的功能与您请求的相同，并且已经通过 [讨论区](https://github.com/mcddhub/mcdd-how-to-spring-boot3/discussions) 或 Slack 与团队讨论过。如果确认这是一个新的请求，请按照以下信息提交您的建议：

        **提示**: 提供尽可能详细的信息，将有助于团队评估和理解您的请求。

  - type: dropdown
    id: module
    attributes:
      label: 模块
      description: 这个功能是否与任何现有模块相关？
      options:
        - 核心模块
        - API
        - 用户界面
        - 数据库
        - 网络
        - 安全
        - 新模块
        - 其他
    validations:
      required: true
  - type: textarea
    id: problem
    attributes:
      label: 问题描述
      description: 这个功能是否与某个问题相关？请详细描述这个问题，说明问题的背景和现状。
    validations:
      required: true
  - type: textarea
    id: solution
    attributes:
      label: 建议的解决方案
      description: 对于这个功能，您提议的解决方案是什么？请详细描述您设想的功能实现方式或界面。
    validations:
      required: true
  - type: dropdown
    id: contribute
    attributes:
      label: 您是否愿意帮助贡献这个功能？
      description: 您是否愿意参与实现此功能（例如，贡献代码、测试、撰写文档等）？
      options:
        - '是，贡献代码'
        - '是，贡献测试'
        - '是，贡献文档'
        - '否，暂时不'
    validations:
      required: true
  - type: textarea
    id: additional-information
    attributes:
      label: 附加信息
      description: |
        任何附加信息、相关链接、讨论或参考资料，这些信息有助于我们更好地理解您的请求。

        **提示**: 您可以拖动文件或粘贴链接到此区域，以提供更多信息。

================
File: .github/workflows/release-drafter.yaml
================
name: CI|CD Release Drafter

on:
  push:
    # branches to consider in the event; optional, defaults to all
    branches:
      - main
  # pull_request event is required only for autolabeler
  pull_request:
    # Only following types are handled by the action, but one can default to all as well
    types: [opened, reopened, synchronize]
  # pull_request_target event is required for autolabeler to support PRs from forks
  # pull_request_target:
  #   types: [opened, reopened, synchronize]

permissions:
  contents: read

jobs:
  update_release_draft:
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      # (Optional) GitHub Enterprise requires GHE_HOST variable set
      #- name: Set GHE_HOST
      #  run: |
      #    echo "GHE_HOST=${GITHUB_SERVER_URL##https:\/\/}" >> $GITHUB_ENV

      # Drafts your next Release notes as Pull Requests are merged into "master"
      - uses: release-drafter/release-drafter@v6
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

================
File: .github/dependabot.yml
================
# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for more information:
# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates
# https://containers.dev/guide/dependabot

version: 2
updates:
 - package-ecosystem: "devcontainers"
   directory: "/"
   schedule:
     interval: weekly

================
File: .github/pull_request_template.md
================
感谢您为我们贡献代码！在提交 pull request 之前，请阅读并遵循以下指南。

## 新模块贡献

如果您贡献了一个新模块，请确保完成以下操作：
1. 将模块名称添加到以下文件中：
    - `./.github/ISSUE_TEMPLATE/bug_report.yaml`
    - `./.github/ISSUE_TEMPLATE/enhancement.yaml`
    - `./.github/ISSUE_TEMPLATE/feature.yaml`
    - `./.github/dependabot.yml`
    - `./.github/labeler.yml`
2. 确保您的模块在 `./docs/` 目录下有相应的文档。

## 依赖升级

- 请不要提交仅包含依赖版本更新的 pull request。每周我们有专门的流程来处理依赖更新。
- 如果升级涉及更多更改（例如弃用的 API），欢迎提交 pull request，描述相关改动和影响。

## 提交前的准备工作

在提交更改之前，请确保执行以下步骤：
1. 运行以下命令检查代码风格并修复问题：
   ```bash
   ./gradlew checkstyleMain checkstyleTest spotlessApply
   ```
2. 修复所有代码风格问题。

## 描述您的更改

请提供关于所做更改的简要描述及其背景：
- 如果是修复问题，请描述问题的表现以及您如何解决它。
- 如果是功能增强，请描述新功能以及它为何有用。
- 如果相关，请引用关联的 issue 编号（使用 `#` 引用）。

## 提交前检查清单

- [ ] 我已阅读并遵循了贡献指南。
- [ ] 我已在本地运行了所有测试并确保通过。
- [ ] 我的更改包含了必要的文档更新。
- [ ] 我已遵循代码风格检查并修复了所有问题。
- [ ] 我已检查并更新了相关 issue 和 PR 模板。

================
File: .github/release-drafter.yml
================
name-template: '$NEXT_PATCH_VERSION 🌈'
tag-template: '$NEXT_PATCH_VERSION'
template: |
  # What's Changed

  😨 Here is a summary of all the changes for this release:

  $CHANGES

  ## Special Thanks
  🐓 A big thanks to all the contributors who helped in this release!

categories:
  - title: '⚠️ Breaking API changes'
    labels:
      - 'breaking-api-change'
    # API changes that require major version updates, such as removing or renaming methods

  - title: '🚀 Features & Enhancements'
    labels:
      - 'feature'
    # New features or enhancements in the project

  - title: '☠️ Deprecations'
    labels:
      - 'deprecation'
    # Features or methods that are being phased out and may be removed in the future

  - title: '🐛 Bug Fixes'
    labels:
      - 'bug'
    # Fixes for bugs and issues found in the project

  - title: '📖 Documentation'
    labels:
      - 'docs'
    # Updates to the documentation, like README or other doc files

  - title: '🧹 Housekeeping'
    labels:
      - 'housekeeping'
    # Code or infrastructure maintenance that doesn't add new features

  - title: '📦 Dependency updates'
    labels:
      - 'dependencies'
    collapse-after: 5
    # Updates to third-party dependencies used in the project, collapsed if too many

================
File: .github/settings.yml
================
# These settings are synced to GitHub by https://probot.github.io/apps/settings/

repository:
  # See https://docs.github.com/en/rest/reference/repos#update-a-repository for all available settings.

  # The name of the repository. Changing this will rename the repository
  name: dev-template

  # A short description of the repository that will show up on GitHub
  description: dev-template

  # A URL with more information about the repository
  homepage: https://github.com/cbq1024/dev-template

  # A comma-separated list of topics to set on the repository
  topics: template

  # Either `true` to make the repository private, or `false` to make it public.
  private: false

  # Either `true` to enable issues for this repository, `false` to disable them.
  has_issues: true

  # Either `true` to enable projects for this repository, or `false` to disable them.
  # If projects are disabled for the organization, passing `true` will cause an API error.
  has_projects: true

  # Either `true` to enable the wiki for this repository, `false` to disable it.
  has_wiki: true

  # Either `true` to enable downloads for this repository, `false` to disable them.
  has_downloads: true

  # Updates the default branch for this repository.
  default_branch: main

  # Either `true` to allow squash-merging pull requests, or `false` to prevent
  # squash-merging.
  allow_squash_merge: true

  # Either `true` to allow merging pull requests with a merge commit, or `false`
  # to prevent merging pull requests with merge commits.
  allow_merge_commit: true

  # Either `true` to allow rebase-merging pull requests, or `false` to prevent
  # rebase-merging.
  allow_rebase_merge: true

  # Either `true` to enable automatic deletion of branches on merge, or `false` to disable
  delete_branch_on_merge: true

  # Either `true` to enable automated security fixes, or `false` to disable
  # automated security fixes.
  enable_automated_security_fixes: true

  # Either `true` to enable vulnerability alerts, or `false` to disable
  # vulnerability alerts.
  enable_vulnerability_alerts: true

# Labels: define labels for Issues and Pull Requests
labels:
  - name: "breaking-api-change"
    color: "ff0000"
    description: "需要大版本更新的 API 变更,例如删除或重命名方法"
  - name: "feature"
    color: "1d76db"
    description: "项目中的新功能或增强功能"
  - name: "deprecation"
    color: "ffa500"
    description: "逐步淘汰的功能或方法,未来可能被移除"
  - name: "bug"
    color: "d73a4a"
    description: "修复项目中发现的错误和问题"
  - name: "docs"
    color: "0075ca"
    description: "更新文档,如自述文件或其他文档文件"
  - name: "housekeeping"
    color: "d4c5f9"
    description: "代码或基础设施维护,不添加新功能"
  - name: "dependencies"
    color: "0366d6"
    description: "更新项目中使用的第三方依赖项,如果数量过多则折叠"

# Milestones: define milestones for Issues and Pull Requests
milestones:
  - title: milestone-title
    description: milestone-description
    # The state of the milestone. Either `open` or `closed`
    state: open

# Collaborators: give specific users access to this repository.
# See https://docs.github.com/en/rest/reference/repos#add-a-repository-collaborator for available options
collaborators:
# - username: bkeepers
#   permission: push
# - username: hubot
#   permission: pull

# Note: `permission` is only valid on organization-owned repositories.
# The permission to grant the collaborator. Can be one of:
# * `pull` - can pull, but not push to or administer this repository.
# * `push` - can pull and push, but not administer this repository.
# * `admin` - can pull, push and administer this repository.
# * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
# * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.

# See https://docs.github.com/en/rest/reference/teams#add-or-update-team-repository-permissions for available options
teams:
  - name: core
    # The permission to grant the team. Can be one of:
    # * `pull` - can pull, but not push to or administer this repository.
    # * `push` - can pull and push, but not administer this repository.
    # * `admin` - can pull, push and administer this repository.
    # * `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
    # * `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
    permission: admin
  - name: docs
    permission: push

branches:
  - name: main
    # https://docs.github.com/en/rest/reference/repos#update-branch-protection
    # Branch Protection settings. Set to null to disable
    protection:
      # Required. Require at least one approving review on a pull request, before merging. Set to null to disable.
      required_pull_request_reviews:
        # The number of approvals required. (1-6)
        required_approving_review_count: 1
        # Dismiss approved reviews automatically when a new commit is pushed.
        dismiss_stale_reviews: true
        # Blocks merge until code owners have reviewed.
        require_code_owner_reviews: true
        # Specify which users and teams can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for organization-owned repositories. Omit this parameter for personal repositories.
        dismissal_restrictions:
          users: []
          teams: []
      # Required. Require status checks to pass before merging. Set to null to disable
      required_status_checks:
        # Required. Require branches to be up to date before merging.
        strict: true
        # Required. The list of status checks to require in order to merge into this branch
        contexts: []
      # Required. Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable.
      enforce_admins: true
      # Prevent merge commits from being pushed to matching branches
      required_linear_history: true
      # Required. Restrict who can push to this branch. Team and user restrictions are only available for organization-owned repositories. Set to null to disable.
      restrictions:
        apps: []
        users: []
        teams: []

================
File: .editorconfig
================
root = true

[*]
charset = utf-8
end_of_line = lf
indent_size = 4
indent_style = space
insert_final_newline = true
max_line_length = 120

[*.json]
indent_size = 2
max_line_length = 80

[*.md]
max_line_length = off
trim_trailing_whitespace = false

[*.py]
indent_size = 4
max_line_length = 79

================
File: .gitattributes
================
/mvnw text eol=lf
*.cmd text eol=crlf

================
File: .gitignore
================
### SELF ###
HELP.md
.env
.env*.local
.fastRequest
.DS_Store

### VUE ###
node_modules/
dist/
npm-debug.log
yarn-error.log

### NEXT ###
/node_modules
/.pnp
.pnp.js
/coverage
/.next/
/out/
/build
*.pem
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*
.vercel
*.tsbuildinfo
next-env.d.ts

### MAVEN ###
target/
!.mvn/wrapper/maven-wrapper.jar
!**/src/main/**/target/
!**/src/test/**/target/

### STS ###
.apt_generated
.classpath
.factorypath
.project
.settings
.springBeans
.sts4-cache

### IntelliJ IDEA ###

.idea
*.iws
*.iml
*.ipr

### NetBeans ###
/nbproject/private/
/nbbuild/
/dist/
/nbdist/
/.nb-gradle/
build/
!**/src/main/**/build/
!**/src/test/**/build/

### VS Code ###
.vscode/

### C,C++ ###
# Prerequisites
*.d

# Object files
*.o
*.ko
*.obj
*.elf

# Linker output
*.ilk
*.map
*.exp

# Precompiled Headers
*.gch
*.pch

# Libraries
*.lib
*.a
*.la
*.lo

# Shared objects (inc. Windows DLLs)
*.so.*

# Executables
*.app
*.i*86
*.x86_64
*.hex
# Debug files
*.dSYM/
*.su
*.idb
*.pdb
# Kernel Module Compile Results
*.mod*
*.cmd
.tmp_versions/
modules.order
Module.symvers
Mkfile.old
dkms.conf
# Fortran module files
*.mod
*.smod

### GO ###
# If you prefer the allow list template instead of the deny list, see community template:
# https://github.com/github/gitignore/blob/main/community/Golang/Go.AllowList.gitignore
#
# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib

# Test binary, built with `go test -c`
*.test

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# Go workspace file
go.work
go.work.sum
.git

================
File: .repomixignore
================
# Add patterns to ignore here, one per line
# Example:
# *.log
# tmp/

================
File: CODE_OF_CONDUCT.md
================
# 🎉 贡献者公约行为准则

## 🙋‍♀️ 我们的承诺

我们作为成员、贡献者和领导者，承诺让每个人在我们的社区中拥有无骚扰的参与体验，不论其年龄、体型、显性或隐性的残疾、种族、性别特征、性别认同和表达、经验水平、教育程度、社会经济地位、国籍、个人外貌、种族、宗教或性取向。

我们承诺以促进开放、欢迎、多样性、包容性和健康社区的方式行事和互动。

## 🌟 我们的标准

以下行为有助于为我们的社区营造积极的环境：

- ❤️ 对他人表现出同理心和善意
- 🤝 尊重不同的意见、观点和经历
- ✅ 提供并优雅地接受建设性的反馈
- 🙏 承担责任，为自己的错误向受到影响的人道歉，并从中学习
- 🌍 关注不仅对自己而且对整个社区最有益的事情

以下行为是不可接受的：

- 🚫 使用带有性暗示的语言或图像，以及任何形式的性关注或挑逗
- 🚫 挑衅、侮辱或诋毁性的评论，以及人身或政治攻击
- 🚫 公共或私人骚扰
- 🚫 未经明确许可，发布他人的私人信息（例如物理地址或电子邮件地址）
- 🚫 其他可以合理地认为在专业环境中不适当的行为

## 🔒 执法职责

社区领导者有责任明确和执行我们对可接受行为的标准，并在对任何被认为不适当、威胁性、冒犯性或有害的行为作出响应时，采取适当和公平的纠正措施。

社区领导者有权利和责任删除、编辑或拒绝与本行为准则不符的评论、提交记录、代码、Wiki 编辑、问题和其他贡献，并在适当时说明管理决策的原因。

## 🌍 适用范围

本行为准则适用于所有社区空间，同时适用于个人以正式身份代表社区的公共场合。例如，使用官方电子邮件地址，通过官方社交媒体账户发布内容，或作为线上或线下活动中的指定代表。

所有社区领导者都有义务尊重任何事件报告者的隐私和安全。

## 📜 执法指南

社区领导者将根据以下社区影响指南确定对违反本行为准则的行为的后果：

### 1. 🛠 修正

**社区影响**：使用不当语言或其他被认为不专业或不受欢迎的行为。

**后果**：由社区领导者发出的私人书面警告，提供有关违规性质的澄清，以及为什么该行为不当的解释。可能要求公开道歉。

### 2. ⚠️ 警告

**社区影响**：通过单次事件或一系列行动导致的违规。

**后果**：警告并附带继续此类行为的后果。规定时间内不得与相关人员互动，包括未经请求与执行行为准则的人互动。这包括避免在社区空间以及外部渠道（如社交媒体）上的互动。违反这些条款可能会导致临时或永久禁令。

### 3. ⏳ 暂时禁令

**社区影响**：严重违反社区标准，包括持续的不当行为。

**后果**：在指定时间内，禁止与社区进行任何形式的互动或公共交流。在此期间，不得与相关人员进行任何形式的公共或私人互动，包括未经请求的互动。违反这些条款可能会导致永久禁令。

### 4. 🚫 永久禁令

**社区影响**：表现出违反社区标准的模式，包括持续的不当行为、对个人的骚扰或对某些群体的攻击或贬低。

**后果**：永久禁止与社区进行任何形式的公共互动。

## 📜 致谢

本行为准则改编自 [Contributor Covenant](https://www.contributor-covenant.org) 的版本，可访问 [行为准则常见问题](https://www.contributor-covenant.org/faq) 获取更多信息。

翻译版本可在 [行为准则翻译](https://www.contributor-covenant.org/translations) 中找到。

================
File: CONTRIBUTING.md
================
# 🤝 Contributing

Thank you for your interest in contributing to this project! Before submitting your contribution, please review the following guidelines to ensure a smooth process.

## 🔧 Setup

### Frontend Setup (Yarn)

The project's documentation uses [Yarn](https://yarnpkg.com/) for package management. Make sure you have Yarn installed before proceeding.

1. **Fork** the repository and create your branch from `main`.
2. Run `yarn install` in the repository root to install dependencies.
3. Run `yarn run docs:dev` to start the development server.
4. If prompted, click "Install" to install any necessary development scripts.
5. Make your changes and test them locally.

### Backend Setup (Maven)

The project's backend uses [Maven](https://maven.apache.org/) for package management. Ensure Maven is installed before proceeding.

1. **Fork** the repository and create your branch from `main`.
2. Run `mvn compile` in the repository root to compile the project.
3. You’re ready to start making changes!

### Backend Setup (Gradle)

Alternatively, if you are using [Gradle](https://gradle.org/) for the backend setup, follow these steps:

1. **Fork** the repository and create your branch from `main`.
2. Run `./gradlew build` in the repository root to build the project.
3. Run `./gradlew run` to start the backend server locally.
4. You're good to go!

## ✅ Linting and Type Checking

This project uses [ESLint](https://eslint.org/) for linting and [TypeScript](https://www.typescriptlang.org/) for type checking. Ensure your code passes both checks before submitting a pull request.

To run linting and type checking:

```bash
yarn run lint
yarn run test
```

## 📝 Commit Message Format

We follow the [Conventional Commits](https://www.conventionalcommits.org/) specification for commit messages. This ensures clarity and consistency across the project.

**Make sure to mention the related issue number in your commit message or the pull request (PR) description.**

### Example Commit Message:
```
fix: resolve issue with API response (fixes #123)
```

By adhering to these guidelines, you help maintain the project's quality and facilitate collaboration.

================
File: LICENSE
================
MIT License

Copyright (c) 2024 cbq1024

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: repomix.config.json
================
{
  "output": {
    "filePath": "repomix-output.txt",
    "style": "plain",
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false
  },
  "include": [],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": []
  },
  "security": {
    "enableSecurityCheck": true
  }
}

================
File: SECURITY.md
================
# 安全策略

## 支持的版本

我们为以下版本的项目发布补丁和更新。如果您的项目版本未列出，说明该版本已不再受支持，建议您升级到受支持的版本。

| 版本 | 支持状态           |
| ---- | ------------------ |
| 1.x  | :white_check_mark: |
| 0.x  | :x:                |

## 报告安全漏洞

如果您在我们的项目中发现了安全漏洞，请按照以下步骤进行负责的披露：

1. **不要为安全漏洞创建公开问题**
   - 请避免公开披露安全漏洞，确保问题保密。

2. **提供足够的细节：**
   - 包括漏洞描述、重现问题的步骤、潜在影响，以及修复建议（如果有）。

3. **确认与响应：**
   - 我们将在收到您的报告后 48 小时内确认，并在 7 天内提供初步响应，说明处理问题的后续步骤。

4. **修复与披露：**
   - 一旦确认问题，我们将采取必要步骤修复漏洞，并与您合作确认修复结果，在发布安全补丁前确保问题解决。
   - 补丁发布后，我们将公开披露漏洞并感谢报告者，除非报告者另有要求。

## 安全更新

您可以通过我们的[发布页面](https://github.com/mcddhub/mcdd-interview-spring-boot-next/releases)订阅安全更新。我们会通知社区任何关键更新或补丁。
